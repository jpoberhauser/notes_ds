{
    "contents" : "also called verbs:\nselect(), which returns a subset of the columns,\nfilter(), that is able to return a subset of the rows,\narrange(), that reorders the rows according to single or multiple variables,\nmutate(), used to add columns from existing data,\nsummarise(), which reduces each group to a single row by calculating aggregate measures.\n\nselect == variables\n=====\nselect(df, Group, Sum)\nreturns everythings but this set of columns\nselect(hflights, -(DepTime:AirTime))\nstarts_with(\"X\"): every name that starts with \"X\",\nends_with(\"X\"): every name that ends with \"X\",\ncontains(\"X\"): every name that contains \"X\",\nmatches(\"X\"): every name that matches \"X\", which can be a regular expression,\nnum_range(\"x\", 1:5): the variables named x01, x02, x03, x04 and x05,\none_of(x): every name that appears in x, which should be a character vector.\n\nmutate == observations\n====================\nmutate(df, loss =   arrDelay- depDelay)\n\nm1 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_percent = (ArrDelay - DepDelay) / DepDelay * 100)\n\n# Remove the redundancy from your previous exercise and reuse loss to define the loss_percent variable.\n# Assign the result to m2\nm2 <- mutate(hflights, loss = ArrDelay - DepDelay, loss_percent = loss / DepDelay * 100)\n\n# Add the three variables as described in the third exercise and save the result to m3\nm3 <- mutate(hflights, TotalTaxi = TaxiIn + TaxiOut, \n                       ActualGroundTime = ActualElapsedTime - AirTime, \n                       Diff = TotalTaxi - ActualGroundTime)\n                       \nfilter == variables\n=========\n                       \nfilter(hflights, Cancelled == 1)\n\n\nx < y, TRUE if x is less than y\nx <= y, TRUE if x is less than or equal to y\nx == y, TRUE if x equals y\nx != y, TRUE if x does not equal y\nx >= y, TRUE if x is greater than or equal to y\nx > y, TRUE if x is greater than y\nx %in% c(a, b, c), TRUE if x is in the vector c(a, b, c)\n\n# All flights that traveled 3000 miles or more.\nf1 <- filter(hflights, Distance >= 3000)\n\n# All flights flown by one of JetBlue, Southwest, or Delta airlines\nf2 <- filter(hflights, UniqueCarrier %in% c(\"JetBlue\", \"Southwest\", \"Delta\"))\n\n# All flights where taxiing took longer than flying\nf3 <- filter(hflights, TaxiIn + TaxiOut > AirTime)\n\n# all flights that departed before 5am or arrived after 10pm.\nf1 <- filter(hflights, DepTime < 500 | ArrTime > 2200)\n\n# all flights that departed late but arrived ahead of schedule\nf2 <- filter(hflights, DepDelay > 0, ArrDelay < 0)\n\n# all cancelled weekend flights\nf3 <- filter(hflights, Cancelled == 1, DayOfWeek %in% c(6,7))\n\n# all flights that were cancelled after being delayed\nf4 <- filter(hflights, Cancelled == 1, !is.na(DepDelay))\n\n\n\narrange == observations\n============\narrange(hflights, Distance, ArrDelay)#ArrDElay is the ties-breaker when pordering by Distance\n# Arrange dtc by departure delays\na1 <- arrange(dtc, DepDelay)\n\n# Arrange dtc so that cancellation reasons are grouped\na2 <- arrange(dtc, CancellationCode)\n\n# Arrange according to carrier and departure delays\na3 <- arrange(hflights, UniqueCarrier, DepDelay)\n\n\n# Arrange according to carrier and decreasing departure delays\na1 <- arrange(hflights, UniqueCarrier, desc(DepDelay))\n\n# Arrange flights by total delay (normal order).\na2 <- arrange(hflights, desc(DepDelay + ArrDelay))\n\n# Filter out flights leaving to DFW before 8am and arrange according to decreasing AirTime \na3 <- arrange(filter(hflights, Dest == \"DFW\", DepTime < 800), desc(AirTime))\n\n\nsummarise == groups\n=========\n\n# Determine the shortest and longest distance flown and save statistics to min_dist and max_dist resp.\ns1 <- summarise(hflights, min_dist = min(Distance), max_dist = max(Distance))\n\n# Determine the longest distance for diverted flights, save statistic to max_div. Use a one-liner!\ns2 <- summarise(filter(hflights, Diverted == 1), max_div = max(Distance))\n# Calculate summarizing statistics for flights that have an ArrDelay that is not NA\ntemp1 <- filter(hflights, !is.na(ArrDelay))\ns1 <- summarise(temp1, earliest= min(ArrDelay), average = mean(ArrDelay), latest = max(ArrDelay), sd = sd(ArrDelay))\n\n# Calculate the maximum taxiing difference for flights that have taxi data available\ntemp2 <- filter(hflights, !is.na(TaxiIn), !is.na(TaxiOut))\ns2 <- summarise(temp2, max_taxi_diff=max(abs(TaxiIn - TaxiOut)))\n\n\n# Calculate the summarizing statistics of hflights\ns1 <- summarise(hflights, n_obs=n(), n_carrier = n_distinct(UniqueCarrier), n_dest = n_distinct(Dest), dest100 = nth(Dest, 100))\n\n# Calculate the summarizing statistics for flights flown by American Airlines (carrier code \"American\")\naa <- filter(hflights, UniqueCarrier == \"American\")\ns2 <- summarise(aa, n_flights=n(), n_canc = sum(Cancelled == 1), p_canc = mean(Cancelled == 1)*100, avg_delay = mean(ArrDelay, na.rm=TRUE))\n\n\n\nChaining your functions:\n======================\n\n\n# Write the 'piped' version of the English sentences.\np <- hflights %>%\n    mutate(diff = TaxiOut - TaxiIn) %>%\n    filter(!is.na(diff)) %>%\n    summarise(avg = mean(diff))\n\n\n# Part 1, concerning the selection and creation of columns\nd <- hflights %>% \n    select(Dest, UniqueCarrier, Distance, ActualElapsedTime) %>%\n    mutate(RealTime = ActualElapsedTime + 100, mph = Distance/RealTime*60) \n\n# Part 2, concerning flights that had an actual average speed of less then 70 mph.\nd %>% filter(!is.na(mph), mph <= 70) %>%\n        summarise(n_less = n(), n_dest = n_distinct(Dest), min_dist = min(Distance), max_dist = max(Distance))\n\n# Solve the exercise using a combination of dplyr verbs and %>%\nhflights %>%\n    select(Dest, Cancelled, Distance, ActualElapsedTime, Diverted) %>%\n    mutate(RealTime = ActualElapsedTime + 100, mph = Distance / RealTime * 60) %>%\n    filter(mph <= 105 | Cancelled == 1 | Diverted == 1) %>%\n    summarise(n_non = n(),\n              p_non = n_non / nrow(hflights) * 100,\n              n_dest = n_distinct(Dest),\n              min_dist = min(Distance),\n              max_dist = max(Distance))\n              \n              \n# Count the number of overnight flights\nhflights %>% \n    filter(!is.na(ArrTime), !is.na(DepTime), ArrTime < DepTime) %>%\n    summarise(n = n())",
    "created" : 1422640358922.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "789875410",
    "id" : "A54B295F",
    "lastKnownWriteTime" : 1420573634,
    "path" : "~/Desktop/OPI/ds_toolbox/dplyr/notas_five_verbs.Rmd",
    "project_path" : "dplyr/notas_five_verbs.Rmd",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}