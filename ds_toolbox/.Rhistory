x <<- y
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
library(datasets)
data(iris)
daya)iris
library(datasets)
data(iris)
?iris
names(iris)
head(iris)
?split
sapply(split(iris, iris$Species), mean)
sapply(split(iris, iris$Species), mean, na.rm = TRUE)
sapply(split(iris, iris$Sepal.Length), mean, na.rm = TRUE)
sapply(split(iris, iris$Species), mean, na.rm = TRUE)
sapply(split(iris), mean, na.rm = TRUE)
split(iris, iris$Species)
s <- split(iris, iris$Species)
s
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
lapply(s, function(x) colMeans(x[, c("Sepal.Length", "Petal.Length")]))
names(iris)
colMeans(iris)
rowMeans(iris[, 1:4])
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
x <- apply(iris[, 1:4], 2, mean)
class(x)
library(datasets)
data(mtcars)
names(mtcars)
x <- split(mtcars, mtcars$cyl)
x
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(mtcars, mean)
sapply(mtcars, cyl, mean)
View(mtcars)
sapply(split(mtcars$hp, mtcars$cyl), mean)
82.63636 - 209.21429
debug(ls)
ls()
set.seed(1)
rpois(5,2)
?rnorm
?qpois
set.seed(10)
x <- rep(0:1, each = 5)
x
e <- rnorm(10, 0, 20)
e
y <- 0.5 + 2 * x + e
y
library(datasets)
Rprof()
setwd("~/Desktop/OPI/ds_toolbox/prog_3")
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
View(outcome)
head(outcome)
names(outcome)
outcome[, 11] <- as.numeric(outcome[, 11])
hist(outcome[, 11])
names(outcome)[11]
names(outcome)
?stop
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
library(dplyr)
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia)
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
Hospital.Name,
State)
best <- function(state, outcome) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
Hospital.Name,
State) %>%
filter(State = state)
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best <- function(state) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
Hospital.Name,
State) %>%
filter(State = state)
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX")
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
Hospital.Name,
State) %>%
filter(State = "TX")
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
Hospital.Name,
State)
names(df)
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
Hospital.Name,
State) %>%
filter(State == "TX")
best <- function(state) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
Hospital.Name,
State) %>%
filter(State == state)
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX")
best <- function(state) {
## Read outcome data
outcome <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df <- outcome %>%
select(Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack,
Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure,
Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia,
Hospital.Name,
State) %>%
filter(State == state)
print(df)
## Check that state and outcome are valid
## Return hospital name in that state with lowest 30-day death
## rate
}
best("TX")
grep("heart attack", names(outcome))
?match
valid_parameters = c("heart attack","heart failure","pneumonia")
valid_parameters
outcome %in% valid_parameters
state
outcome = "heart attack"
if (!outcome %in% valid_parameters) { stop("invalid outcome")}
!outcome %in% valid_parameters
outcome %in% valid_parameters
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df[,7]
df[,"State"]
best <- function(state, outcome) {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
valid_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% valid_parameter1) { stop("invalid outcome")}
valid_parameter2 = unique(df[,"State"])
if (!state %in% valid_parameter2) stop("invalid state")
}
best("TXX", "heartattack")
best("TX", "heartattack")
best("TX", "heart attack")
"Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
df %>% filter(State == state)
state = "TX"
dfb <- df %>% filter(State == state)
outcome
colName <- fullColName[match(outcome,names(dfb))]
colnamesvec <- names(dfb)
colName <- colnamesvec[match(outcome,ok_parameter1)]
ok_parameter1 = c("heart attack","heart failure","pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
colName
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
colName
colName
dfb <- dfb %>% select(colName, State) %>%
filter(State == state)
dfb[,colName]
?as.double
idx <- which.min(as.double(dfb[,colName]))
idx
colName
dfb[idx,"Hospital.Name"]
best <- function(state, outcome) {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
dfb <- dfb %>% filter(State == state)
minim_pos <- which.min(as.double(dfb[,colName]))
## Return hospital name in that state with lowest 30-day death
## rate
dfb[minim_pos,"Hospital.Name"]
}
best("TX", "heart attack")
best("TXs", "heart attack")
best("TX", "hdfeart attack")
best("TX", "hdfeart attack")
best("TX", "heart attack")
best("TX", "heart failure")
submit()
setwd("~/Desktop/OPI/ds_toolbox/prog_3")
submit()
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
best("SC", "heart attack")
state = "SC"
outcome = "heart attack"
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
dfb <- dfb %>% filter(State == state)
dfb
levels(df$State)
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
df
levels(df$State)
levels(as.factor(df$State))
best <- function(state, outcome) {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
dfb <- dfb %>% filter(as.factor(State) == state)
minim_pos <- which.min(as.double(dfb[,colName]))
## Return hospital name in that state with lowest 30-day death
## rate
dfb[minim_pos,"Hospital.Name"]
}
best("SC", "heart attack")
dfb <- dfb %>% filter(as.factor(State) == state)
dfb
as.factor(df$State) == state
dfa <- dfb %>% filter(as.factor(df$State) == state)
state
state = "SD"
dfa <- dfb %>% filter(as.factor(df$State) == state)
levels(df$State)
levels(as.factor(df$State))
dfa <- df[df$State==state,]
submit()
best <- function(state, outcome) {
## Read outcome data
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
dfa <- df[df$State==state,]
minim_pos <- which.min(as.double(dfa[,colName]))
## Return hospital name in that state with lowest 30-day death
## rate
dfb[minim_pos,"Hospital.Name"]
}
best("SC", "heart attack"))
best("SC", "heart attack")
state = "SC"
outcome = "heart attack"
best("TX", "heart failure")
best("MD", "heart attack")
df <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
colName
dfa <- df[df$State==state,]
View(dfa)
minim_pos <- which.min(as.double(dfa[,colName]))
minim_pos
dfb[minim_pos,"Hospital.Name"]
dfa[,colName]
which.min(as.double(dfa[,colName]))
dfb[minim_pos,"Hospital.Name"]
submit()
submit()
submit()
names(df)
data <- read.csv("./ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
setwd("~/Desktop/OPI/ds_toolbox/prog_3")
data <- read.csv("./ProgAssignment3-data/outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
df <- read.csv("./outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
sort <- dfa[order(as.numeric(dfa[[colName]]),dfa[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
sort
View(sort)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
df <- read.csv("./outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
## Check that state and outcome are valid
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
#column name
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
#state
dfa <- df[df$State==state,]
## Return hospital name in that state with the given rank
## 30-day death rate
sort <- dfa[order(as.numeric(dfa[[colName]]),dfa[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
if (num=="best") num = 1
if (num=='worst') num = nrow(sort)
sort[num,"Hospital.Name"]
}
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("MN", "heart attack", 5000)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
df <- read.csv("./outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
## Check that state and outcome are valid
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
#column name
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
#state
dfa <- df[df$State==state,]
## Return hospital name in that state with the given rank
## 30-day death rate
sort <- dfa[order(as.numeric(dfa[[colName]]),dfa[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
if (num=='worst') num = nrow(sort)
if (num=="best") num = 1
solution <- sort[num,"Hospital.Name"]
print(solution)
}
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
?order
submit()
submit()
submit()
submit()
?seq_along
rankall <- function(outcome, num = "best") {
## Read outcome data
## Read outcome data
df <- read.csv("./outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
## For each state, find the hospital of the given rank
#column name
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
## Return a data frame with the hospital names and the
## (abbreviated) state name
for (i in seq_along(ok_parameter2)) {
data.state <- df[df$State==ok_parameter2[i],]
# order data by outcome
sort <- df[order(as.numeric(df[[colName]]),df[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (num=="best") num = 1
if (num=='worst') num = nrow(sort)
hospital[i] <- sort[num,"Hospital.Name"]
}
data.frame(hospital=hospital,state=ok_parameter2,row.names=ok_parameter2)
}
head(rankall("heart attack", 20), 10)
rankall <- function(outcome, num = "best") {
## Read outcome data
## Read outcome data
df <- read.csv("./outcome-of-care-measures.csv", colClasses = "character",na.strings="Not Available")
## Check that state and outcome are valid
ok_parameter1 = c("heart attack","heart failure","pneumonia")
if (!outcome %in% ok_parameter1) { stop("invalid outcome")}
ok_parameter2 = unique(df[,"State"])
if (!state %in% ok_parameter2) stop("invalid state")
## For each state, find the hospital of the given rank
#column name
colnamesvec <-  c("Hospital.30.Day.Death..Mortality..Rates.from.Heart.Attack", "Hospital.30.Day.Death..Mortality..Rates.from.Heart.Failure", "Hospital.30.Day.Death..Mortality..Rates.from.Pneumonia")
colName <- colnamesvec[match(outcome,ok_parameter1)]
## Return a data frame with the hospital names and the
## (abbreviated) state name
hospital<-character(0)
for (i in seq_along(ok_parameter2)) {
data.state <- df[df$State==ok_parameter2[i],]
# order data by outcome
sort <- df[order(as.numeric(df[[colName]]),df[["Hospital.Name"]],decreasing=FALSE,na.last=NA), ]
#handle num input
this.num = num
if (num=="best") num = 1
if (num=='worst') num = nrow(sort)
hospital[i] <- sort[num,"Hospital.Name"]
}
data.frame(hospital=hospital,state=ok_parameter2,row.names=ok_parameter2)
}
head(rankall("heart attack", 20), 10)
submit()
submit()
submit()
rankall("pneumonia", "worst")
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
dateDownloaded <- date()
dateDownloaded
if(!file.exists("data")){dir.create("data")}
getwd()
tables()
library(DT)
tables()
DT[,w:=z*2]
DT = data.table(dfa)
library(data.table)
DT = data.table(dfa)
DT[2,]
DT[DT$y == "a"]
DT[c(2,3)] subsets based on rows
DT[c(2,3)]
DT[, list(mean(x), sum(z))]
DT[, table(y)]
DT[,w:=z*2]
DT[,w]
?fread
?download.file
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile = "data_quiz1.csv")
url <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url, destfile = "data_quiz1.csv")
x <- download.file(url)
getwd()
download.file(url, destfile = "data_quiz1.csv")
library(utils)
download.file(url, destfile = "data_quiz1.csv")
data <- read.csv("getdata-data-ss06hid.csv")
data <- read.csv("getdata-data-ss06hid.csv")
dim(data)
names(data)
summary(data$VAL)
datat <- data.table(data)
library(dplyr)
values <- data %>% filter(VAL == 24)
nrow(values)
summary(data$FES)
head(data$FES)
head(data$FES,100)
View(data)
dat <- read.xlsx("dat.xslx")
library(xlsx)
install.packages("xlsx")
library(xslx)
dat <- read.table("dat.xslx")
setwd("~/Desktop/OPI/ds_toolbox")
dat <- read.table("dat.xslx")
?read.table
